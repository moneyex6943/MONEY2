
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import BOT_TOKEN, ADMIN_ID

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class ExchangeForm(StatesGroup):
    amount = State()
    paypal = State()
    wallet = State()
    proof = State()

def calculate_usdt(amount):
    commission = max(8, 15 - (amount // 100) * 0.5)
    received = round(amount * (1 - commission / 100), 2)
    return received, commission

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"))
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å PayPal ‚Üí USDT (TRC20).

"
        "üí∞ –ö–æ–º–∏—Å—Å–∏—è: —Ä–µ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è 
üìà –û—Ç 15% –¥–æ 8%
üìÖ –ú–∏–Ω–∏–º—É–º: 30$

"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=kb
    )

@dp.message_handler(lambda m: m.text == "üìÑ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def create_request(message: types.Message):
    await message.answer("üíµ –í–≤–µ–¥–∏ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å:")
    await ExchangeForm.amount.set()

@dp.message_handler(state=ExchangeForm.amount)
async def get_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 30:
            return await message.answer("–ú–∏–Ω–∏–º—É–º 30$. –í–≤–µ–¥–∏ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ.")
        usdt, commission = calculate_usdt(amount)
        await state.update_data(amount=amount, usdt=usdt, commission=commission)
        await message.answer(
            f"üî¢ –ö–æ–º–∏—Å—Å–∏—è: {commission:.1f}%
ü§ë –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {usdt} USDT

–í–≤–µ–¥–∏ —Å–≤–æ–π PayPal e-mail:")
        await ExchangeForm.next()
    except:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

@dp.message_handler(state=ExchangeForm.paypal)
async def get_paypal(message: types.Message, state: FSMContext):
    await state.update_data(paypal=message.text)
    await message.answer("ü¶ô –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ TRC20 –∫–æ—à–µ–ª—å–∫–∞:")
    await ExchangeForm.next()

@dp.message_handler(state=ExchangeForm.wallet)
async def get_wallet(message: types.Message, state: FSMContext):
    await state.update_data(wallet=message.text)
    await message.answer("üìå –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –ø–µ—Ä–µ–≤–æ–¥:")
    await ExchangeForm.next()

@dp.message_handler(state=ExchangeForm.proof, content_types=types.ContentTypes.ANY)
async def get_proof(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    data = await state.get_data()
    caption = (
        f"üîç –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω
"
        f"üí∞ –°—É–º–º–∞: {data['amount']}$
"
        f"üìÖ –ö–æ–º–∏—Å—Å–∏—è: {data['commission']:.1f}%
"
        f"üìÜ –ö –≤—ã–¥–∞—á–µ: {data['usdt']} USDT
"
        f"üì• PayPal: {data['paypal']}
"
        f"ü¶ô –ö–æ—à–µ–ª—ë–∫: {data['wallet']}"
    )
    proof_photo = message.photo[-1].file_id
    await bot.send_photo(ADMIN_ID, proof_photo, caption=caption,
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {message.from_user.id}"),
            KeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {message.from_user.id}")
        )
    )
    await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.finish()

@dp.message_handler(lambda m: m.text.startswith("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"))
async def confirm_exchange(message: types.Message):
    user_id = int(message.text.split()[-1])
    await bot.send_message(user_id, "‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±–º–µ–Ω!")

@dp.message_handler(lambda m: m.text.startswith("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"))
async def decline_exchange(message: types.Message):
    user_id = int(message.text.split()[-1])
    await bot.send_message(user_id, "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
